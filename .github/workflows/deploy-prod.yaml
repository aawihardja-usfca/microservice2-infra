name: Deploy to Production

on:
  repository_dispatch:
    types: [ deploy-Production ]

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: '905418330989'
  EKS_CLUSTER_NAME: Production

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name   ${{ env.EKS_CLUSTER_NAME }}

      # TASK: 
      # 1) Need to compare the current deployment with the new one
      # 2) If the new one is different, then we need to update the deployment
      # 3) Render & apply the green Deployment
      # 4) Flip the main Service selector to green
      # 5) Delete the blue Deployment
      - name: Deploy GREEN for ${{ github.event.client_payload.service }}
        run: |
          for SERVICE in auth-api frontend users-api todos-api log-message-processor; do
            IMAGE=$(echo '${{ toJson(github.event.client_payload) }}' | jq -r --arg s "$SERVICE" '.[$s]')
            
            if [ -z "$IMAGE" ] || [ "$IMAGE" = "null" ]; then
              echo "‚ö†Ô∏è Skipping $SERVICE ‚Äî no image URI provided in payload."
              continue
            fi

            CURRENT=$(kubectl get deployment ${SERVICE}-blue -o=jsonpath='{.spec.template.spec.containers[0].image}')
            
            echo "‚Üí $SERVICE current: $CURRENT"
            echo "‚Üí $SERVICE target : $IMAGE"

            if [ "$CURRENT" != "$IMAGE" ]; then
              echo "üîÑ Updating $SERVICE to $IMAGE"

              # Deploy GREEN version
              sed "s|__IMAGE__|$IMAGE|g" \
                k8s/uat-green/${SERVICE}/deployment.yaml \
                | kubectl apply -f -

              # Wait for rollout
              kubectl rollout status deployment/${SERVICE}-green --timeout=120s

              # Update service selector to point to green
              kubectl patch svc/${SERVICE} \
                -p '{"spec":{"selector":{"service":"'"${SERVICE}"'","version":"green"}}}' \
                || { echo "‚ùå Failed to patch service $SERVICE"; exit 1; }

              # Remove the previous BLUE deployment
              kubectl delete deployment/${SERVICE}-blue || true
            else
              echo "‚úÖ Skipping $SERVICE (already up-to-date)"
            fi
          done