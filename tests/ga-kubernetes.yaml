---
# auth-api deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-api-blue
  labels:
    service: auth-api
    version: blue
spec:
  replicas: 1
  selector:
    matchLabels:
      service: auth-api
      version: blue
  template:
    metadata:
      labels:
        app: microservice-app-example
        service: auth-api
        version: blue
    spec:
      containers:
      - name: auth-api
        image: 035863456454.dkr.ecr.us-east-1.amazonaws.com/auth-api:ga-auth-api-1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8081
        env:
        - name: AUTH_API_PORT
          value: "8081"
        - name: JWT_SECRET
          value: myfancysecret
        - name: USERS_API_ADDRESS
          value: http://users-api:8083
        - name: ZIPKIN_URL
          value: http://zipkin:9411/api/v2/spans

---
# auth-api service
apiVersion: v1
kind: Service
metadata:
  name: auth-api
spec:
  selector:
    service: auth-api
    version: blue   # ‚Üê pick only blue pods
  ports:
  - port: 8081
    targetPort: 8081

---
# frontend deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-blue
  labels:
    service: frontend
    version: blue
spec:
  replicas: 1
  selector:
    matchLabels:
      service: frontend
      version: blue
  template:
    metadata:
      labels:
        app: microservice-app-example
        service: frontend
        version: blue
    spec:
      containers:
      - name: frontend
        image: 035863456454.dkr.ecr.us-east-1.amazonaws.com/frontend:ga-frontend-1.3
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: AUTH_API_ADDRESS
          value: http://auth-api:8081
        - name: PORT
          value: "8080"
        - name: TODOS_API_ADDRESS
          value: http://todos-api:8082
        - name: ZIPKIN_URL
          value: http://zipkin:9411/api/v2/spans

---
# frontend service
apiVersion: v1
kind: Service
metadata:
  name: frontend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:035863456454:certificate/8b8d2660-c127-4fcf-8542-ab18665fb924"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  type: LoadBalancer
  selector:
    service: frontend
    version: blue
  ports:
  - name: https
    port: 443
    targetPort: 8080
  - name: http
    port: 80
    targetPort: 8080

---
# log-message-processor deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: log-message-processor-blue
  labels:
    service: log-message-processor
    version: blue
spec:
  replicas: 1
  selector:
    matchLabels:
      service: log-message-processor
      version: blue
  template:
    metadata:
      labels:
        app: microservice-app-example
        service: log-message-processor
        version: blue
    spec:
      containers:
      - name: log-message-processor
        image: 035863456454.dkr.ecr.us-east-1.amazonaws.com/log-message-processor:ga-log-message-processor-1.0
        imagePullPolicy: Always
        env:
        - name: REDIS_HOST
          value: redis-queue
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_CHANNEL
          value: log_channel
        - name: ZIPKIN_URL
          value: http://zipkin:9411/api/v1/spans

---
# todos-api deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todos-api-blue
  labels:
    service: todos-api
    version: blue
spec:
  replicas: 1
  selector:
    matchLabels:
      service: todos-api
      version: blue
  template:
    metadata:
      labels:
        app: microservice-app-example
        service: todos-api
        version: blue
    spec:
      containers:
      - name: todos-api
        image: 035863456454.dkr.ecr.us-east-1.amazonaws.com/todos-api:ga-todos-api-1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8082
        env:
        - name: JWT_SECRET
          value: myfancysecret
        - name: TODO_API_PORT
          value: "8082"
        - name: REDIS_HOST
          value: redis-queue
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_CHANNEL
          value: log_channel
        - name: ZIPKIN_URL
          value: http://zipkin:9411/api/v2/spans

---
# todos-api service
apiVersion: v1
kind: Service
metadata:
  name: todos-api
spec:
  selector:
    service: todos-api
    version: blue
  ports:
  - port: 8082
    targetPort: 8082

---
# users-api deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-api-blue
  labels:
    service: users-api
    version: blue
spec:
  replicas: 1
  selector:
    matchLabels:
      service: users-api
      version: blue
  template:
    metadata:
      labels:
        app: microservice-app-example
        service: users-api
        version: blue
    spec:
      containers:
      - name: users-api
        image: 035863456454.dkr.ecr.us-east-1.amazonaws.com/users-api:ga-users-api-1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8083
        env:
        - name: JWT_SECRET
          value: myfancysecret
        - name: SERVER_PORT
          value: "8083"
        - name: SPRING_ZIPKIN_BASE_URL
          value: http://zipkin:9411

---
# users-api service
apiVersion: v1
kind: Service
metadata:
  name: users-api
spec:
  selector:
    service: users-api
    version: blue
  ports:
  - port: 8083
    targetPort: 8083

---
# zipkin deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin
  labels:
    app: microservice-app-example
    service: zipkin
spec:
  replicas: 1
  selector:
    matchLabels:
      service: zipkin
  template:
    metadata:
      labels:
        app: microservice-app-example
        service: zipkin
    spec:
      containers:
      - name: zipkin
        image: openzipkin/zipkin
        ports:
        - containerPort: 9411
        - containerPort: 9410

---
# zipkin service
apiVersion: v1
kind: Service
metadata:
  name: zipkin
  labels:
    app: microservice-app-example
    service: zipkin
spec:
  type: LoadBalancer
  selector:
    service: zipkin
  ports:
  - port: 9411
    targetPort: 9411

---
# redis-queue deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-queue
  labels:
    app: microservice-app-example
    service: redis-queue
spec:
  replicas: 1
  selector:
    matchLabels:
      service: redis-queue
  template:
    metadata:
      labels:
        app: microservice-app-example
        service: redis-queue
    spec:
      containers:
      - name: redis-queue
        image: redis
        ports:
        - containerPort: 6379

---
# redis-queue service
apiVersion: v1
kind: Service
metadata:
  name: redis-queue
  labels:
    app: microservice-app-example
    service: redis-queue
spec:
  selector:
    service: redis-queue
  ports:
  - port: 6379
    targetPort: 6379